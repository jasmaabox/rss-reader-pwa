// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Set from "rescript/lib/es6/belt_Set.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var StorageError = /* @__PURE__ */Caml_exceptions.create("Storage.StorageError");

var key = "contentProviders";

function cmp(a, b) {
  return Caml.caml_string_compare(a.feedUrl, b.feedUrl);
}

var ContentProviderCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function setContentProviders(contentProviders) {
  var rawContentProviders = JSON.stringify(Belt_Set.toArray(contentProviders));
  if (rawContentProviders !== undefined) {
    localStorage.setItem(key, rawContentProviders);
    return ;
  } else {
    return Pervasives.failwith("could not serialize content providers");
  }
}

function getContentProviders(param) {
  var rawContentProviders = localStorage.getItem(key);
  if (rawContentProviders !== null) {
    var json = JSON.parse(rawContentProviders);
    var contentProviders = Js_json.classify(json);
    if (typeof contentProviders !== "number" && contentProviders.TAG === /* JSONArray */3) {
      return Belt_Set.fromArray(Belt_Array.map(contentProviders._0, (function (json) {
                        var json$1 = Js_json.classify(json);
                        if (typeof json$1 === "number") {
                          return Pervasives.failwith("invalid format");
                        }
                        if (json$1.TAG !== /* JSONObject */2) {
                          return Pervasives.failwith("invalid format");
                        }
                        var json$2 = json$1._0;
                        var name = Js_dict.get(json$2, "name");
                        if (name === undefined) {
                          return Pervasives.failwith("invalid format");
                        }
                        var name$1 = Js_json.classify(Caml_option.valFromOption(name));
                        if (typeof name$1 === "number") {
                          return Pervasives.failwith("invalid format");
                        }
                        if (name$1.TAG !== /* JSONString */0) {
                          return Pervasives.failwith("invalid format");
                        }
                        var feedUrl = Js_dict.get(json$2, "feedUrl");
                        if (feedUrl === undefined) {
                          return Pervasives.failwith("invalid format");
                        }
                        var feedUrl$1 = Js_json.classify(Caml_option.valFromOption(feedUrl));
                        if (typeof feedUrl$1 === "number" || feedUrl$1.TAG !== /* JSONString */0) {
                          return Pervasives.failwith("invalid format");
                        } else {
                          return {
                                  name: name$1._0,
                                  feedUrl: feedUrl$1._0
                                };
                        }
                      })), ContentProviderCmp);
    }
    var contentProviders$1 = Belt_Set.make(ContentProviderCmp);
    setContentProviders(contentProviders$1);
    return contentProviders$1;
  }
  var contentProviders$2 = Belt_Set.make(ContentProviderCmp);
  setContentProviders(contentProviders$2);
  return contentProviders$2;
}

export {
  StorageError ,
  key ,
  ContentProviderCmp ,
  setContentProviders ,
  getContentProviders ,
  
}
/* ContentProviderCmp Not a pure module */
